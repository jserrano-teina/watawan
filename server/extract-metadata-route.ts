import { Request, Response } from 'express';

// Esta funci√≥n contiene la implementaci√≥n actualizada del endpoint /extract-metadata
// que utiliza Puppeteer para mejorar la extracci√≥n de metadatos
export async function handleExtractMetadataRequest(req: Request, res: Response) {
  const url = req.query.url as string;
  
  if (!url) {
    return res.status(400).json({ message: "URL parameter is required" });
  }
  
  try {
    console.log(`üìã Extrayendo metadatos de URL: ${url}`);
    
    // Registrar informaci√≥n del dispositivo para diagn√≥stico
    const userAgent = req.headers['user-agent'] || 'Unknown';
    const deviceType = userAgent.includes('Mobile') ? 'm√≥vil' : 
                     (userAgent.includes('Tablet') ? 'tablet' : 'desktop');
    
    console.log(`üì± Dispositivo solicitante: ${deviceType} - User-Agent: ${userAgent.substring(0, 50)}...`);
    
    // Funci√≥n para crear un objeto de respuesta consistente siempre con la misma estructura
    const createResponseObject = (data: any) => {
      return {
        title: data.title || '',
        description: data.description || '',
        imageUrl: data.imageUrl || '',
        price: '' // Siempre vac√≠o seg√∫n la especificaci√≥n
      };
    };
    
    // Importar el m√≥dulo de extracci√≥n de Amazon
    const { isAmazonUrl, extractAmazonMetadata } = await import('./amazon-extractor');
    const isAmazon = isAmazonUrl(url);
    
    console.log(`üîç Extrayendo metadatos para: ${url} ${isAmazon ? '(Amazon)' : ''}`);
    
    // Para Amazon usamos nuestro extractor especializado
    if (isAmazon) {
      console.log(`üõí Detectada URL de Amazon. Usando extractor especializado.`);
      
      try {
        // Obtener metadatos con nuestro extractor especializado
        console.log(`üìä Iniciando extracci√≥n con amazon-extractor...`);
        const amazonMetadata = await extractAmazonMetadata(url, req.headers['user-agent'] as string);
        
        // Verificar si obtuvimos datos
        if (amazonMetadata && (amazonMetadata.title || amazonMetadata.imageUrl)) {
          console.log(`‚úÖ Extracci√≥n especializada exitosa:`);
          console.log(`   - T√≠tulo: ${amazonMetadata.title ? amazonMetadata.title.substring(0, 30) + '...' : 'No disponible'}`);
          console.log(`   - Imagen: ${amazonMetadata.imageUrl ? 'Disponible' : 'No disponible'}`);
          
          // Si el t√≠tulo comienza con "Producto Amazon", significa que usamos el t√≠tulo gen√©rico
          // En ese caso, intentamos con Puppeteer para obtener datos m√°s precisos
          if (amazonMetadata.title && amazonMetadata.title.startsWith('Producto Amazon')) {
            console.log(`ü§ñ El t√≠tulo es gen√©rico. Intentando con Puppeteer para obtener metadatos m√°s precisos...`);
            
            try {
              const { extractAmazonMetadataWithPuppeteer } = await import('./puppeteer-extractor');
              const puppeteerMetadata = await extractAmazonMetadataWithPuppeteer(url);
              
              if (puppeteerMetadata && puppeteerMetadata.title && !puppeteerMetadata.title.startsWith('Producto Amazon')) {
                console.log(`‚úÖ Extracci√≥n con Puppeteer exitosa:`);
                console.log(`   - T√≠tulo: ${puppeteerMetadata.title.substring(0, 30)}...`);
                console.log(`   - Imagen: ${puppeteerMetadata.imageUrl ? 'Disponible' : 'No disponible'}`);
                
                return res.json(createResponseObject({
                  title: puppeteerMetadata.title,
                  description: puppeteerMetadata.description || '',
                  imageUrl: puppeteerMetadata.imageUrl || amazonMetadata.imageUrl || ''
                }));
              }
            } catch (puppeteerError) {
              console.error(`‚ö†Ô∏è Error con Puppeteer: ${puppeteerError}`);
              // Si falla Puppeteer, continuamos con los datos que ten√≠amos de Amazon
            }
          }
          
          return res.json(createResponseObject({
            title: amazonMetadata.title || 'Producto Amazon',
            description: amazonMetadata.description || '',
            imageUrl: amazonMetadata.imageUrl || ''
          }));
        } else {
          console.log(`‚ö†Ô∏è La extracci√≥n especializada no obtuvo todos los datos. Intentando con Puppeteer.`);
          
          try {
            // Usar Puppeteer como m√©todo alternativo
            const { extractAmazonMetadataWithPuppeteer } = await import('./puppeteer-extractor');
            const puppeteerMetadata = await extractAmazonMetadataWithPuppeteer(url);
            
            if (puppeteerMetadata && (puppeteerMetadata.title || puppeteerMetadata.imageUrl)) {
              console.log(`‚úÖ Extracci√≥n con Puppeteer exitosa:`);
              console.log(`   - T√≠tulo: ${puppeteerMetadata.title ? puppeteerMetadata.title.substring(0, 30) + '...' : 'No disponible'}`);
              console.log(`   - Imagen: ${puppeteerMetadata.imageUrl ? 'Disponible' : 'No disponible'}`);
              
              return res.json(createResponseObject({
                title: puppeteerMetadata.title || 'Producto Amazon',
                description: puppeteerMetadata.description || '',
                imageUrl: puppeteerMetadata.imageUrl || ''
              }));
            } else {
              // Si Puppeteer no obtiene datos, usar metascraper como √∫ltimo recurso
              console.log(`‚ö†Ô∏è Puppeteer no obtuvo datos. Intentando con metascraper como fallback...`);
            }
          } catch (puppeteerError) {
            console.error(`‚ùå Error en Puppeteer: ${puppeteerError}`);
            console.log(`‚ö†Ô∏è Usando m√©todos alternativos despu√©s de fallo en Puppeteer...`);
          }
          
          // Si Puppeteer falla o no obtiene datos, usar los m√©todos de respaldo tradicionales
          // Importar el extractor gen√©rico como respaldo
          const { getUrlMetadata } = await import('./metascraper');
          const backupMetadata = await getUrlMetadata(url, req.headers['user-agent'] as string);
          
          // Combinar los resultados dando prioridad al extractor especializado
          const combinedMetadata = {
            title: amazonMetadata.title || backupMetadata.title || 'Producto Amazon',
            description: amazonMetadata.description || backupMetadata.description || '',
            imageUrl: amazonMetadata.imageUrl || backupMetadata.imageUrl || ''
          };
          
          return res.json(createResponseObject(combinedMetadata));
        }
      } catch (error: any) {
        console.log(`‚ö†Ô∏è Error en extracci√≥n especializada: ${error.message || 'desconocido'}. Intentando con Puppeteer...`);
        
        try {
          // Si falla el extractor especializado, intentar con Puppeteer
          const { extractAmazonMetadataWithPuppeteer } = await import('./puppeteer-extractor');
          const puppeteerMetadata = await extractAmazonMetadataWithPuppeteer(url);
          
          if (puppeteerMetadata && (puppeteerMetadata.title || puppeteerMetadata.imageUrl)) {
            console.log(`‚úÖ Recuperaci√≥n con Puppeteer exitosa despu√©s de fallo en el extractor principal`);
            return res.json(createResponseObject(puppeteerMetadata));
          } else {
            console.log(`‚ö†Ô∏è Puppeteer tampoco obtuvo datos. Usando m√©todo gen√©rico.`);
          }
        } catch (puppeteerError) {
          console.error(`‚ùå Error tambi√©n en Puppeteer: ${puppeteerError}`);
          console.log(`‚ö†Ô∏è Todos los extractores especializados fallaron. Usando m√©todo gen√©rico.`);
        }
        
        // Si todo lo anterior falla, usar el m√©todo gen√©rico como √∫ltimo recurso
        const { getUrlMetadata } = await import('./metascraper');
        const genericMetadata = await getUrlMetadata(url, req.headers['user-agent'] as string);
        
        return res.json(createResponseObject(genericMetadata));
      }
    } else {
      // Para otros sitios no-Amazon
      try {
        // Primero intentar con Puppeteer para una mejor extracci√≥n
        console.log(`ü§ñ Usando Puppeteer para sitio no-Amazon...`);
        const { extractMetadataWithPuppeteer } = await import('./puppeteer-extractor');
        const puppeteerMetadata = await extractMetadataWithPuppeteer(url);
        
        if (puppeteerMetadata && (puppeteerMetadata.title || puppeteerMetadata.imageUrl)) {
          console.log(`‚úÖ Extracci√≥n con Puppeteer exitosa para sitio no-Amazon`);
          return res.json(createResponseObject(puppeteerMetadata));
        } else {
          console.log(`‚ö†Ô∏è Puppeteer no obtuvo datos completos para sitio no-Amazon. Usando m√©todos alternativos...`);
        }
      } catch (puppeteerError) {
        console.error(`‚ùå Error en Puppeteer para sitio no-Amazon: ${puppeteerError}`);
        console.log(`‚ö†Ô∏è Usando m√©todos alternativos despu√©s de fallo en Puppeteer...`);
      }
      
      // Si Puppeteer falla o no obtiene datos, continuar con el flujo normal para sitios no-Amazon
      const { extractOpenGraphData } = await import('./open-graph');
      
      // Crear una promesa con timeout para evitar bloqueos
      const fetchWithTimeout = async (ms: number): Promise<any> => {
        return Promise.race([
          extractOpenGraphData(url, req.headers['user-agent'] as string), // Usar el UA original del cliente
          new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Timeout obteniendo metadatos')), ms)
          )
        ]);
      };
      
      // Dar un m√°ximo de 5 segundos para la extracci√≥n
      let metadata;
      try {
        metadata = await fetchWithTimeout(5000);
        
        console.log(`‚úÖ Metadatos extra√≠dos con √©xito: ${metadata.title ? 't√≠tulo ‚úì' : 't√≠tulo ‚úó'}, ${metadata.imageUrl ? 'imagen ‚úì' : 'imagen ‚úó'}`);
      } catch (timeoutError) {
        console.log(`‚ö†Ô∏è Timeout en la extracci√≥n OpenGraph. Usando metascraper como fallback...`);
        
        // Si hay timeout, usar metascraper como alternativa
        const { getUrlMetadata } = await import('./metascraper');
        metadata = await getUrlMetadata(url, req.headers['user-agent'] as string);
      }
      
      res.json(createResponseObject(metadata));
    }
  } catch (error) {
    console.error(`‚ùå Error extrayendo metadatos: ${error}`);
    
    // En caso de error, devolver un objeto vac√≠o con la estructura correcta
    res.json({
      title: '',
      description: '',
      imageUrl: '',
      price: ''
    });
  }
}